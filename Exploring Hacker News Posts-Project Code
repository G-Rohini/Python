
Rohini G: This project is for Exploring Hacker News Posts 
In [1]:

​
# Read in the data.
import csv
​
f = open('hacker_news.csv')
hn = list(csv.reader(f))
hn[:5]
Out[1]:
[['id', 'title', 'url', 'num_points', 'num_comments', 'author', 'created_at'],
 ['12224879',
  'Interactive Dynamic Video',
  'http://www.interactivedynamicvideo.com/',
  '386',
  '52',
  'ne0phyte',
  '8/4/2016 11:52'],
 ['10975351',
  'How to Use Open Source and Shut the Fuck Up at the Same Time',
  'http://hueniverse.com/2016/01/26/how-to-use-open-source-and-shut-the-fuck-up-at-the-same-time/',
  '39',
  '10',
  'josep2',
  '1/26/2016 19:30'],
 ['11964716',
  "Florida DJs May Face Felony for April Fools' Water Joke",
  'http://www.thewire.com/entertainment/2013/04/florida-djs-april-fools-water-joke/63798/',
  '2',
  '1',
  'vezycash',
  '6/23/2016 22:20'],
 ['11919867',
  'Technology ventures: From Idea to Enterprise',
  'https://www.amazon.com/Technology-Ventures-Enterprise-Thomas-Byers/dp/0073523429',
  '3',
  '1',
  'hswarna',
  '6/17/2016 0:01']]
In [2]:

headers = hn[0]
hn = hn[1:]
print(headers)
print(hn[:5])
['id', 'title', 'url', 'num_points', 'num_comments', 'author', 'created_at']
[['12224879', 'Interactive Dynamic Video', 'http://www.interactivedynamicvideo.com/', '386', '52', 'ne0phyte', '8/4/2016 11:52'], ['10975351', 'How to Use Open Source and Shut the Fuck Up at the Same Time', 'http://hueniverse.com/2016/01/26/how-to-use-open-source-and-shut-the-fuck-up-at-the-same-time/', '39', '10', 'josep2', '1/26/2016 19:30'], ['11964716', "Florida DJs May Face Felony for April Fools' Water Joke", 'http://www.thewire.com/entertainment/2013/04/florida-djs-april-fools-water-joke/63798/', '2', '1', 'vezycash', '6/23/2016 22:20'], ['11919867', 'Technology ventures: From Idea to Enterprise', 'https://www.amazon.com/Technology-Ventures-Enterprise-Thomas-Byers/dp/0073523429', '3', '1', 'hswarna', '6/17/2016 0:01'], ['10301696', 'Note by Note: The Making of Steinway L1037 (2007)', 'http://www.nytimes.com/2007/11/07/movies/07stein.html?_r=0', '8', '2', 'walterbell', '9/30/2015 4:12']]
In [9]:

ask_posts=[] 
show_posts=[]
other_posts=[]
​
for post in hn:
    title=post[1]
    if title.lower().startswith("ask hn"):
        ask_posts.append(post)
    elif title.lower().startswith("show hn"):
        show_posts.append(post)
    else:
        other_posts.append(post)
​
print(len(ask_posts))
print(len(show_posts))
print(len(other_posts))
​
    
1744
1162
17194
In [10]:

total_ask_comments=0
for row in ask_posts:
    num_comments=int(row[4])
    total_ask_comments=total_ask_comments+num_comments
​
avg_ask_comments=total_ask_comments/len(ask_posts)
print(avg_ask_comments)
​
​
total_show_comments=0
for row in show_posts:
    num_comments=int(row[4])
    total_show_comments=total_show_comments+num_comments
 
      
avg_show_comments=total_show_comments/len(show_posts)
print(avg_show_comments)
​
​
​
    
14.038417431192661
10.31669535283993
In [ ]:

      import datetime as dt
​
result_list = []
​
for post in ask_posts:
    result_list.append(
        [post[6], int(post[4])]
    )
​
comments_by_hour = {}
counts_by_hour = {}
date_format = "%m/%d/%Y %H:%M"
​
for each_row in result_list:
    date = each_row[0]
    comment = each_row[1]
    time = dt.datetime.strptime(date, date_format).strftime("%H")
    if time in counts_by_hour:
            comments_by_hour[time] += comment
            counts_by_hour[time] += 1
    else:
            comments_by_hour[time] = comment
            counts_by_hour[time] = 1
​
comments_by_hour                                
    
    
    
    
    
In [ ]:

avg_by_hour = []
​
for hr in comments_by_hour:
    avg_by_hour.append([hr, comments_by_hour[hr] / counts_by_hour[hr]])
​
avg_by_hour  
​
In [ ]:

swap_avg_by_hour=[]
for row in avg_by_hour:
    swap_avg_by_hour.append([row(1),row(0)])
    
print(swap_avg_by_hour)
​
sorted_swap=sorted(swap_avg_by_hour,reverse=true)
sorted_swap
​
print("Top 5 Hours for Ask Posts Comments") 
Top5=sorted_swap[:5]
for avg,hr in Top5:
      print(
        "{}: {:.2f} average comments per post".format(
            dt.datetime.strptime(hr, "%H").strftime("%H:%M"),avg
        )
    )
​
In [ ]:

​
